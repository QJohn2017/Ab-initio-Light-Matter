#!python
# Cathal O Broin - cathal.obroin4 at mail.dcu.ie - 2015
# This work is not developed in affiliation with any organisation.
#
# This file is part of AILM.
#
# AILM is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# AILM is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with AILM.  If not, see <http://www.gnu.org/licenses/>.

####### Settings ####################################
import os
Import('MODE')

Program = 'ailm'
Path = '../include'

#extreme flags from:
#https://stackoverflow.com/questions/5088460/flags-to-enable-thorough-and-verbose-g-warnings

if MODE == 'release':
    CPPFlags = '-pedantic -fopenmp -mtune=native -O3 -std=c++14 -Wall -fdiagnostics-color=always'
elif MODE == 'debug':
    CPPFlags = '-pedantic -g -std=c++14 -Wall -fdiagnostics-color=always'
elif MODE == 'extreme': ##Extreme level of warnings etc.
    CPPFlags = '-pedantic -Wall -Wextra -Wcast-align -Wcast-qual -Wctor-dtor-privacy -Wdisabled-optimization -Wformat=2 -Winit-self -Wlogical-op -Wmissing-declarations -Wmissing-include-dirs -Wnoexcept -Wold-style-cast -Woverloaded-virtual -Wredundant-decls -Wshadow -Wsign-conversion -Wsign-promo -Wstrict-null-sentinel -Wstrict-overflow=5 -Wswitch-default -Wundef -Werror -Wno-unused'
else:
    print 'Flags not specified'

Src = ['main.cpp']#, 'splines.cpp']
Libs = ['netcdf_c++4', 'boost_serialization', 'config++', '-lgsl', '-lgslcblas', '-lblas', '-llapack']
#Libs = ['netcdf_c++', 'boost_serialization', 'config++', '-lgsl', '-lgslcblas', '-lblas', '-llapack']

######################################################
#env = Environment(platform = 'posix', tool = 'default', CXX='clang++', CPPPATH = Path, LIBS=Libs)
env = Environment(platform = 'posix', tool = 'default', CXX='g++', CPPPATH = Path, LIBS=Libs)
env.Program(target=Program, source=Src, CPPFLAGS=CPPFlags, LINKFLAGS='-fopenmp')

###
#For scan-build support
###
env["CC"] = os.getenv("CC") or env["CC"]
env["CXX"] = os.getenv("CXX") or env["CXX"]
###

Program = 'prop'
Src = ['main.prop.cpp']
env.Program(target=Program, source=Src, CPPFLAGS=CPPFlags, LINKFLAGS='-fopenmp')

Libs = [Libs, 'gtest']
env.Replace(LIBS=Libs)
Program = 'unittests'
Src = ['tests.cpp']#, 'splines.cpp']
env.Program(target=Program, source=Src, CPPFLAGS=CPPFlags, LINKFLAGS='-fopenmp')

